# ==============================================================================
# nginx.conf - Nginx web server configuration for Laravel
# ==============================================================================
# This file configures how Nginx handles incoming HTTP requests and serves
# the Laravel application. It defines routing rules, PHP-FPM integration,
# and security settings.
# ==============================================================================

server {
    # Listen on port 80 (HTTP)
    # This is the standard HTTP port inside the container
    # docker-compose.yml maps this to port 8080 on the host machine
    listen 80;

    # Server name - the domain name that this server block responds to
    # "localhost" means it will respond to http://localhost requests
    server_name localhost;

    # Document root - the directory where Nginx looks for files to serve
    # Laravel's entry point is in the "public" directory
    # All web requests start from index.php in this directory
    root /var/www/html/public;

    # Default index files to look for when a directory is requested
    # Try index.php first (Laravel's entry point), then fall back to index.html
    index index.php index.html;

    # ===========================================================================
    # Logging Configuration
    # ===========================================================================
    # Access log - records all requests (useful for debugging and monitoring)
    access_log /var/log/nginx/access.log;
    
    # Error log - records errors and warnings (useful for troubleshooting)
    error_log /var/log/nginx/error.log;

    # ===========================================================================
    # Laravel Routes Handler
    # ===========================================================================
    # This location block handles all requests to the root and subdirectories
    location / {
        # try_files directive attempts to serve files in the following order:
        # 1. $uri - Try to serve the file directly (e.g., /image.jpg)
        # 2. $uri/ - Try to serve as a directory with index file
        # 3. /index.php?$query_string - Pass to Laravel's front controller
        #
        # This enables Laravel's routing system to handle all dynamic routes
        # while still serving static files (CSS, JS, images) directly
        try_files $uri $uri/ /index.php?$query_string;
    }

    # ===========================================================================
    # PHP-FPM Configuration
    # ===========================================================================
    # This location block handles all requests for PHP files
    # The ~ means this is a regular expression match
    # \.php$ matches any URI ending with .php
    location ~ \.php$ {
        # Security: Ensure the PHP file exists before passing to PHP-FPM
        # Returns 404 if the file doesn't exist (prevents security vulnerabilities)
        try_files $uri =404;

        # Split the URI into script name and path info
        # Example: /index.php/some/path becomes script=/index.php, path=/some/path
        fastcgi_split_path_info ^(.+\.php)(/.+)$;

        # Pass the request to PHP-FPM service
        # "php" is the service name from docker-compose.yml
        # 9000 is the port PHP-FPM listens on
        # Docker's internal DNS resolves "php" to the PHP container's IP
        fastcgi_pass php:9000;

        # Default file to execute when directory is requested
        fastcgi_index index.php;

        # Include standard FastCGI parameters
        # This file contains default variables needed by PHP-FPM
        include fastcgi_params;

        # Set the SCRIPT_FILENAME parameter
        # This tells PHP-FPM the full path to the PHP file to execute
        # $document_root is /var/www/html/public
        # $fastcgi_script_name is the PHP file (e.g., /index.php)
        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;

        # Set PATH_INFO if present (used by some frameworks for routing)
        fastcgi_param PATH_INFO $fastcgi_path_info;
    }

    # ===========================================================================
    # Security: Deny Access to Hidden Files
    # ===========================================================================
    # This location block denies access to any file/directory starting with a dot
    # Examples: .env, .git, .htaccess
    # This prevents exposing sensitive configuration and version control files
    location ~ /\. {
        deny all;  # Return 403 Forbidden for any matching request
    }
}
